Gcovr User Guide
==================
:doctype: article

:cpp: {basebackend@docbook:c++:cpp}
:makefile: {basebackend@docbook:make:makefile}

:numbered!:
[abstract]
Abstract
--------

Gcovr provides a utility for managing the use of the GNU
http://gcc.gnu.org/onlinedocs/gcc/Gcov.html[gcov] utility and
generating summarized code coverage results. This command is inspired
by the Python  http://nedbatchelder.com/code/coverage/[coverage.py]
package, which provides a similar utility in Python. The +gcovr+
command produces either compact human-readable summary reports or
machine readable XML reports (in
http://cobertura.sourceforge.net/[Cobertura] format). Thus, gcovr
can be viewed as a command-line alternative to the
http://ltp.sourceforge.net/coverage/lcov.php[lcov] utility, which
runs gcov and generates an HTML-formatted report.

:numbered:


Overview
--------

Gcovr is a Python package that includes a self-contained +gcovr+
command.  Gcovr is an extension of +gcov+, a GNU utility that
summarizes the lines of code that are executed - or "covered" -
while running an executable.  The +gcovr+ command interprets +gcov+
data files to summarize code coverage in sevearl formats:

* Text output with coverage statistics indicated with summary statistics and lists of uncovered line, and
* XML output that is compatible with the Cobertura code coverage utility.

////
* HTML output with coverage rates indicated using colored bar graphs.
////


The http://gcovr.com[Gcovr Home Page] is
http://gcovr.com[http://gcovr.com].  This webpage contains links
for documentation in
http://gcovr.com/guide.html[HTML],
http://gcovr.com/guide.pdf[PDF], and
http://gcovr.com/guide.epub[EPUB] formats.  The
http://gcovr.com[Gcovr Home Page] also includes developer
resources (e.g. https://software.sandia.gov/hudson/view/gcovr/[automated
test results]).  Gcovr is available under the
http://www.gnu.org/licenses/bsd.html[BSD]
license.

The Gcovr User Guide provides the following documentation:

 - <<gettingStarted,Getting Started>>: Some simple examples that illustrate how to use Gcovr
 - <<gcovrCommand,The +gcovr+ Command>>: Description of command-line options for +gcovr+
 - <<installation,Installation>>: How to install Gcovr
 - <<discussion,Status and Future Plans>>: Comments on the past, present and future of Gcovr


[[gettingStarted]]
Getting Started
---------------

The +gcovr+ command provides a summary of the lines that have been
executed in a program.  Code coverage statistics help you discover
untested parts of a program, which is particularly important when
assessing code quality.  Well-tested code is a characteristic of
high quality code, and software developers often assess code coverage
statistics when deciding if software is ready for a release.

The +gcovr+ command can be used to analyze programs compiled with
GCC.   The following sections illustrate the application of +gcovr+
to test coverage of the following program:

----
include::examples/example1/example1.cpp[]
----
This code executes several subroutines in this program, but some lines in the program are not
executed.

A First Example
~~~~~~~~~~~~~~~

We compile +example1.cpp+ with the GCC compiler as follows:
[source,bash]
----
include::examples/.example1_compile.sh[]
----
Note that we compile this program without optimization, because
optimization may combine lines of code and otherwise change the
flow of execution in the program.  Additionally, we compile with
the +-fprofile-arcs -ftest-coverage -fPIC+ compiler options, which
add logic to generate output files that can be processed by the
+gcov+ command.

The compiler generates the +program+ executable.  When we execute this command:
[source,bash]
----
include::examples/.example1_run.sh[]
----
the files +example1.gcno+ and +example1.gcda+ are generated.  These
files are processed with by +gcov+ to generate code coverage
statistics.  The +gcovr+ command calls +gcov+ and summarizes these
code coverage statistics in various formats.  For example:
[source,bash]
----
include::examples/.example1_gcovr.sh[]
----
generates a text summary of the lines executed:

----
include::examples/example1.txt[]
----

Note that +gcov+ accumulates statistics by line.  Consequently, it
works best with a programming style that places only one statement
on each line.  In +example1.cpp+, the +MACRO+ macro executes a
branch, but +gcov+ cannot discern which branch is executed.


A Second Example
~~~~~~~~~~~~~~~~

MORE HERE


[[gcovrCommand]]
The +gcovr+ Command
-----------------

The +gcovr+ command recursively searches a directory tree to find
+gcov+ coverage files, and generates a text summary of the code
coverage.  The +--help+ option generates the following summary of
the +gcovr+ command line options:

----
include::examples/gcovr.out[]
----
The following sections illustrate the use of these command line options.


General Options
~~~~~~~~~~~~~~~

TODO


[[installation]]
Installation
------------

Gcovr requires virtually no installation.

////
The +cxxtestgen+ script can be directly executed from the
+cxxtest/bin+ directory.  Simply adding this directory to the PATH
environment of a command shell is sufficient for many applications.
Beyond that, the build process for test runners simply needs to
reference the +cxxtest+ root directory to enable proper includes
during compilation.

The FOG parser requires two Python packages:

 - +ply+
 - +ordereddict+ (This is needed when running Python 2.4, 2.5 or 2.6)

If these packages are not available, then +cxxtestgen+ will generate an error when the 
FOG parser option is selected.
If you have
http://pypi.python.org/pypi/setuptools[setuptools] or
http://pypi.python.org/pypi/distribute[distribute]
installed, then
you can install these packages from PyPI by executing
[source,bash]
----
easy_install ply
easy_install ordereddict
----

The +cxxtestgen+ script has been tested with many different versions
of Python:  2.4 - 3.3, though future releases will not support
Python 2.4.  Note that this script has only been tested with the
CPython implementation.  CxxTest 4.2.1 has been tested on Linux and
Mac platforms using the `g++` and `clang++` compilers.
////



[[discussion]]
Status and Future Plans
-----------------------

The Gcovr X.X release ...

Gcovr is heavily
used at Sandia National Laboratories, and Sandia's ongoing use of
Gcovr is a major driver for CxxTest development.


:numbered!:

[[acknowledgements]] 
Acknowledgements
----------------

The following developers contributed to the Gcovr X.x releases:

* William Hart
* John Siirola

The CxxTest documentation is generated using
http://www.methods.co.nz/asciidoc/[AsciiDoc].

////
CxxTest has greatly benefited from the support of the open source
community.  We would like to thank the following organizations for
providing web hosting and computing resources: GitHub, SourceForge,
Tigris.org, Sandia National Laboratories, Google and COIN-OR.  The development
of CxxTest has been partially supported by Sandia National Laboratories.
Sandia National Laboratories is a multi-program laboratory managed
and operated by Sandia Corporation, a wholly owned subsidiary of
Lockheed Martin Corporation, for the U.S.  Department of Energy's
National Nuclear Security Administration under contract DE-AC04-94AL85000.
////


[appendix]
[[appendix_C]] 
Testing Gcovr
---------------

In the +gcovr/test+ directory, you can execute
[source,bash]
----
python test_gcovr.py 
----
to launch all tests.  By default, this test script executes test suites
on a variety of code configurations that reflect different use-cases for
gcovr.

You can execute a specific test suite by giving its name as an
argument to this test script.  For example, the command
[source,bash]
----
python test_gcovr.py GcovrXml
----
executes the +GcovrXml+ test suite, which tests gcovr with XML output.

To run the +test_gcovr.py+ script, you will need to install the
https://pypi.python.org/pypi/pyutilib.th[pyutilib.th] package.
If you have
http://pypi.python.org/pypi/setuptools[setuptools] or
http://pypi.python.org/pypi/distribute[distribute]
installed, then
you can install this package from PyPI by executing
[source,bash]
----
easy_install pyutilib.th
----


// vim: ft=asciidoc
